### YamlMime:Tutorial
title: Enviar mensajes proactivos
metadata:
  title: Enviar mensajes proactivos
  description: En este escenario, aprenderá a enviar mensajes proactivos
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: Leer más sobre mensajes proactivos
  ms.custom: mvc
  ms.localizationpriority: none
  ms.openlocfilehash: 70f1803644dbed01efe4d9fa3f60483ae01837b1
  ms.sourcegitcommit: fc9f906ea1316028d85b41959980b81f2c23ef2f
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 09/12/2021
  ms.locfileid: "59157120"
items:
- durationInMinutes: 1
  content: "Un mensaje proactivo es cualquier mensaje enviado por un bot que no responde a una solicitud de un usuario. Esto puede incluir mensajes, como:\n - Mensajes de bienvenida\n - Notificaciones\n - Mensajes programados\n \nEsta guía paso a paso le ayuda a enviar un mensaje proactivo desde un bot. Verá los siguientes resultados:\n\n* Mensaje de saludo proactivo en el chat        \n![Saludo proactivo en el chat](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* Mensaje de saludo proactivo como tarjeta adaptable    \n![hello proactivo en la tarjeta adaptable](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: Requisitos previos
  durationInMinutes: 2
  content: "Asegúrese de instalar lo siguiente:    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).\n* [ASP.NET y desarrollo web,](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer)o carga de trabajo de desarrollo multiplataforma [de .NET Core.](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer)\n* [ngrok:](https://ngrok.com/download)una aplicación multiplataforma que permite exponer un servidor de desarrollo local a Internet con el mínimo esfuerzo.\n* [Obtenga un espacio empresarial Teams desarrollador gratuito.](https://developer.microsoft.com/en-us/microsoft-365/dev-program)\n"
- title: Configurar entorno local
  durationInMinutes: 3
  content: "1.  Descargue el [código de ejemplo](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (archivo Zip) y extraiga los archivos.\n1.  Vaya a los archivos extraídos y haga doble clic **en ProactiveBot.csproj**. La solución se abre en Visual Studio.\n1.  En Visual Studio, haga clic con el botón secundario en el proyecto (**ProactiveBot**) y seleccione **Compilar** para crear la solución.\n\n    ![Proyecto Proactivebot](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>Solución de problemas</b></summary>\n\n    Si obtiene el error **No se puede encontrar el** paquete, siga estos pasos:\n\n    1.  Vaya **a Herramientas**  >  **NuGet Administrador de paquetes**  >  **Administrador de paquetes Configuración**.\n    1.  En la **ventana Opciones** que aparece, seleccione **NuGet Administrador de paquetes** Orígenes  >  **de paquetes**.\n    1.  Seleccione **Agregar**.\n    1.  Escriba **nuget.org** en **los campos Nombre** y **https://api.nuget.org/v3/index.json** **Origen.**\n    1.  Seleccione **Actualizar** y **Aceptar**.\n    1.  Recompilar el proyecto.\n    <br>\n\n    </details>\n    \n1. Descomprima para instalar ngrok.\n   * Windows: Haga doble clic **enngrok.zip**.\n   * Linux u OS X: descomprima ngrok desde el terminal y ejecute el `unzip /path/to/ngrok.zip` comando.\n1. Ejecute ngrok desde la línea de comandos con los argumentos siguientes:\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. Copie la dirección URL de ngrok (como se resalta en la imagen) para obtener más referencia como dirección URL base de ngrok en los pasos siguientes. \n\n    ![URL base de ngrok](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: Crear e instalar Teams aplicación
  durationInMinutes: 5
  content: "1. Ve a Teams > **App Studio** e importa el archivo **AppManifest.zip** disponible en el código de ejemplo descargado (archivo Zip).\n\n    ![Aplicación de importación de App Studio](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. Seleccione **Bots**  >  **Set up**.\n\n    ![Configuración del bot](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. En la **ventana Configurar** un bot que aparece, escriba **Nombre** (por ejemplo, **Demostración** proactiva de mensajes), **seleccione Personal** y seleccione Crear **bot** para crear el bot.\n\n    ![Crear id. de bot](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. Anexa **/api/messages** a la dirección URL base de ngrok (que has copiado) y esta establece como dirección de extremo **bot**. La dirección URL tendría este aspecto: `https://yourngrokdomain.ngrok.io/api/messages` .\n\n    ![Dirección del extremo del bot](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. Espere unos segundos para que los cambios entren en vigor.     \n\n    > Si tarda más tiempo, selecciona **Pestañas** y, a continuación, la **sección Bots** para forzar la actualización.\n    \n1. Selecciona **Generar nueva contraseña para** generar la nueva contraseña de la aplicación y copiarla. \n\n    ![Generar contraseña de aplicación](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Vaya a Visual Studio y abra el **appsettings.jsarchivo on.**  Pegue la contraseña como el valor de `MicrosoftAppPassword` .    \n1. Ve a **App Studio** y copia el identificador de la aplicación. \n\n    ![Generar identificador de aplicación](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Vaya a Visual Studio y abra el **appsettings.jsarchivo on.**  Pegue el identificador de la aplicación como el valor de `MicrosoftAppId` . Tendrá `appsettings.json` los siguientes valores de configuración:    \n\n    ![Valores de appsetting](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. Presione **F5** o **seleccione IIS express** para ejecutar el código.\n\n    ![Ejecutar código](~/assets/images/proactive-scenario/run-code.png)\n\n    Aparece el ejemplo de mensaje proactivo correspondiente:  \n\n    ![Mensaje proactivo de ejemplo](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. Ve a **Probar y distribuir**  >  **Instalar** para volver a instalar la misma aplicación.\n\n    ![Instalar aplicación](~/assets/images/proactive-scenario/install-app.png)   \n\n1. Seleccione la [http://localhost:3978/api/notify](http://localhost:3978/api/notify) dirección URL para obtener un mensaje de saludo proactivo en el chat.\n\n    ![Mensaje proactivo enviado](~/assets/images/proactive-scenario/result.png)\n\n1. Vaya a Teams. Recibirá un mensaje de saludo proactivo del bot cuando la instalación se realiza correctamente.          \n\n    ![Saludo proactivo en el chat](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: Agregar tarjeta adaptable al mensaje proactivo
  durationInMinutes: 10
  content: "1. En Visual Studio, detenga el proceso de depuración.\n\n    ![Detener depuración](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. Haga clic con el botón **secundario en Dependencias**, **seleccione Administrar NuGet paquetes**.\n\n    ![Agregar paquete de tarjeta adaptable1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. En **NuGet ProactiveBot**, seleccione **Examinar** y busque **AdaptiveCards** . Haga clic en **Instalar**. \n\n    ![Agregar paquete de tarjeta adaptable2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. Abra el **archivo NotifyController.cs** y reemplace el código existente por `BotCallback` el siguiente código para enviar el mensaje de tarjeta adaptable:     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. Mantenga el mouse sobre la línea roja ondulada y seleccione **usar AdaptiveCards** para resolver los errores. \n\n    ![Resolver error](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. Presione **F5** para que se ejecute el código. \n1. Ve a Teams y desinstala la aplicación. \n    \n    ![Desinstalar aplicación](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. Vuelva a instalar la misma aplicación para obtener el `conversationUpdate` evento.   \n\n1. Seleccione la [http://localhost:3978/api/notify](http://localhost:3978/api/notify) dirección URL para obtener un mensaje de saludo proactivo en la tarjeta adaptable.     \n"
- title: Desafío completo
  durationInMinutes: 3
  content: >
    ¿Has llegado a algo como esto? Así es como aparece el mensaje de saludo proactivo en la tarjeta adaptable:


    ![hello proactivo en la tarjeta adaptable](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    Ha completado el escenario.

    * Puede enviar notificaciones diariamente o solicitar comentarios del usuario de forma periódica.

    * Controlar los límites de limitación para evitar varias notificaciones.
