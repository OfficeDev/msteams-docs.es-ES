### YamlMime:Tutorial
title: Crear un bot de comandos con JavaScript
metadata:
  title: Crear un bot de comandos con JavaScript
  description: En este tutorial, aprenderá a crear un bot de comandos con JavaScript mediante la creación de un bot de comandos con Teams Toolkit.
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: Volver a agregar funcionalidad
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: a071eefc4e581d71cd3c970d1c052feb291b3f4d
  ms.sourcegitcommit: 5e645a3436a6924f4a6bf470c563aa0d76e0d226
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 09/07/2022
  ms.locfileid: "67615469"
items:
- durationInMinutes: 1
  content: "Microsoft Teams permite automatizar tareas repetitivas mediante un bot de comandos. Responde a comandos simples enviados en chats con tarjetas adaptables. \n\nEn este tutorial, aprenderá lo siguiente:\n\n- Cómo compilar un bot de comandos con el kit de herramientas de Teams.\n- Acerca de la estructura de directorios de la aplicación.\n\nEsta guía paso a paso le ayuda a compilar un bot de comandos con Teams Toolkit. Verá la siguiente salida:\n\n  :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\":::\n"
- title: Requisitos previos
  durationInMinutes: 1
  content: "\nEsta es una lista de herramientas que necesitará para compilar e implementar las aplicaciones.\n\n| &nbsp; | Instalar | Para usar |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript o TypeScript, entornos de compilación. Use la versión más reciente. |\n| &nbsp; | [Kit de herramientas de Teams](#install-the-teams-toolkit) | Extensión de Microsoft Visual Studio Code que crea un scaffolding de proyecto para la aplicación. Use la versión 4.0.0.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Entorno de tiempo de ejecución de JavaScript de back-end. Use la versión 14 o 16.|\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams para colaborar con todos los usuarios con los que trabaja a través de aplicaciones para chat, reuniones, llamadas y todo en un solo lugar.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (recomendado) o [Google Chrome](https://www.google.com/chrome/) | Un explorador con herramientas de desarrollo. |\n| &nbsp; | [Cuenta de desarrollador de Microsoft 365](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Acceso a la cuenta de Teams con los permisos adecuados para instalar una aplicación. |\n\n> [!NOTE]\n> La guía se prueba en las versiones 4.0.0 y 14 y 16 del kit de herramientas de Teams y Nodejs. Los pasos de esta guía pueden funcionar con otras versiones, pero no se han probado.\n\n## <a name=\"prepare-development-environment\"></a>Preparación del entorno de desarrollo\n\nDespués de instalar las herramientas necesarias, configure el entorno de desarrollo.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Instalación del kit de herramientas de Teams\n\nEl kit de herramientas de Teams ayuda a simplificar el proceso de desarrollo con herramientas para aprovisionar e implementar recursos en la nube para la aplicación, publicar en la tienda de Teams y mucho más. \n \nPuede usar el kit de herramientas con Visual Studio Code o CLI (interfaz de línea de comandos) denominada `TeamsFx`.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Abra Visual Studio Code y seleccione **Extensiones** (**Ctrl+Mayús+X** / **⌘⇧-X** o **Ver extensiones de >**).\n1. En el cuadro de búsqueda, escriba **Kit de herramientas de Teams**.\n1. Seleccione **Instalar** junto al kit de herramientas de Teams.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/teams-toolkit.png\" alt-text=\"Ilustración que muestra la instalación de la extensión teams Toolkit.\":::\n\n El icono del kit de herramientas de Teams aparece en la barra lateral Visual Studio Code después de instalarlo.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Ilustración que muestra el icono del kit de herramientas de Teams en Visual Studio Code barra lateral.\":::\n\nTambién puede encontrar el kit de herramientas de Teams en [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Línea de comandos](#tab/cli)\n\nPara instalar la CLI de TeamsFx, use el administrador de `npm` paquetes:\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nEn función de la configuración, es posible que tenga que usar `sudo` para instalar la CLI:\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nEs más común en sistemas Linux y macOS.\n\nAsegúrese de agregar la memoria caché global npm a la ruta de acceso. Este paso se realiza normalmente como parte del instalador de Node.js.  \n\nPuede usar la CLI con el `teamsfx` comando . Compruebe que el comando funciona ejecutando `teamsfx -h`.\n\n> [!NOTE]\n> Antes de ejecutar TeamsFx en terminales de PowerShell, asegúrese de habilitar la directiva de ejecución **firmada remota** para PowerShell.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Configuración del inquilino de desarrollo de Teams\n\nUn **inquilino** es como un espacio o un contenedor donde chatea, comparte archivos y ejecuta reuniones para su organización en Teams. También puede transferir localmente y probar la aplicación.\n\n### <a name=\"check-for-sideloading-option\"></a>Comprobación de la opción de instalación local\n\nDespués de crear la aplicación, debe cargarla en Teams sin distribuirla. Esto se conoce como transferencia local. Inicie sesión en su cuenta de Microsoft 365 para ver esta opción.\n\n > [!NOTE]\n > La instalación local es necesaria para obtener una vista previa y probar aplicaciones en el entorno local de Teams. Habilite la instalación local para obtener una vista previa y probar la aplicación en Teams localmente.\n\n¿Ya tiene un inquilino y tiene acceso de administrador? ¡Vamos a comprobar si realmente lo haces!\n\nPara comprobar la transferencia local de aplicaciones en Teams:\n\n 1. En el cliente de Teams, seleccione **Almacenar** .\n 1. Seleccione **Administrar las aplicaciones**.\n 1. Seleccione **Publicar una aplicación**.\n 1. Busque la opción **Cargar una aplicación personalizada**. Si ve la opción, la instalación de prueba de aplicaciones está habilitada.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"Ilustración que muestra la opción para cargar una aplicación personalizada en Teams.\":::\n\n     > [!NOTE]\n     > Póngase en contacto con el administrador de Teams si no tiene la opción de cargar una aplicación personalizada.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Creación de un inquilino para desarrolladores de Teams gratuito (opcional)\n\nSi no tiene una cuenta de desarrollador de Teams, puede obtenerla de forma gratuita. ¡Únete al programa para desarrolladores de Microsoft 365!\n\n1. Vaya al [programa para desarrolladores de Microsoft 365](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Seleccione **Unirse ahora** y siga las instrucciones en pantalla.\n1. Seleccione **Configurar suscripción E5** en la pantalla de bienvenida.\n1. Configurar la cuenta de administrador. Una vez finalizada, se muestra la pantalla siguiente.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. Inicie sesión en Teams con la nueva cuenta de administrador. Ahora debe tener la opción **Cargar una aplicación personalizada** .\n"
- title: Compilación del bot de comandos
  durationInMinutes: 1
  content: "**Para compilar un bot de comandos mediante Visual Studio Code**\n\n 1. Abrir Visual Studio Code.\n\n 1. Seleccione icono del Kit de herramientas de Teams :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: en la barra lateral de Visual Studio Code.\n\n 1. Seleccione **Crear una nueva aplicación de Teams**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png\" alt-text=\"Ubicación del vínculo Crear nuevo proyecto en la barra lateral del Kit de herramientas de Teams.\":::\n\n 1. Seleccione **la opción Crear una nueva aplicación de Teams** para crear una aplicación mediante teams toolkit.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png\" alt-text=\"El asistente comienza para crear un nuevo proyecto\":::\n\n 1. Asegúrese de que **el bot de comandos** está seleccionado como la funcionalidad que desea compilar en la aplicación.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-bot.png\" alt-text=\"Seleccionar funcionalidad de la aplicación\":::\n\n 1. Seleccione **JavaScript** como lenguaje de programación.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"Captura de pantalla que muestra cómo seleccionar el lenguaje de programación.\":::\n \n 1. Seleccione **Carpeta predeterminada** para almacenar la carpeta raíz del proyecto en la ubicación predeterminada.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-default-location.png\" alt-text=\"Seleccione Ubicación predeterminada para el almacenamiento.\":::\n\n    También puede cambiar la ubicación predeterminada mediante los pasos siguientes:\n\n       1. Seleccione **Examinar**.\n\n          :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-browse.png\" alt-text=\"Seleccione Examinar para el almacenamiento.\":::\n\n       1. Seleccione la ubicación del área de trabajo del proyecto.\n       1. Seleccione **Seleccionar carpeta**.\n\n           :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-folder.png\" alt-text=\"Seleccione Carpeta.\":::\n \n 1. Escriba un nombre adecuado para la aplicación, como el bot de comandos, como el nombre de la aplicación. \n 1. Seleccione **Introducir**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/app-name.png\" alt-text=\"Nombre de la aplicación.\":::\n\n     > [!NOTE]\n     > Asegúrese de usar solo caracteres alfanuméricos en el nombre de la aplicación.\n\n 1. De forma predeterminada, el proyecto se abre en una nueva ventana en 10 segundos. Si desea abrir en la ventana actual, seleccione **Abrir en la ventana actual**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/new-window-notification.png\" alt-text=\"Nueva ventana Notificación para scaffolding.\":::\n\n     La aplicación de bot de comandos se crea en unos segundos.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/command-bot.png\" alt-text=\"Captura de pantalla que muestra la aplicación creada.\":::\n\n 1. Seleccione **el icono Ejecutar y depurar** :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\"::: en la barra lateral Visual Studio Code.\n\n 1. Seleccione **Debug(Edge)** o **Debug(Chrome) en** la lista desplegable.\n\n 1. Seleccione **el botón Iniciar depuración** .\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/debug-app.png\" alt-text=\"Depuración de la aplicación\":::\n\n 1. Seleccione **Agregar**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/add-app.png\" alt-text=\"Agregar una aplicación\":::     \n\n 1. Seleccione el bot de comandos.\n \n 1. Seleccione **Introducir**.\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png\" alt-text=\"Agregar una lista desplegable de aplicaciones\":::  \n\n    Recibirá la siguiente respuesta de comando en la tarjeta adaptable:\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"final-output\":::      \n\n ## <a name=\"take-tour-of-source-code\"></a>Realizar un recorrido por el código fuente\n\n Teams Toolkit proporciona componentes para crear una aplicación. Después de crear el proyecto, puede ver las carpetas y los archivos del proyecto en el área **Explorador** de Visual Studio Code.\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/folder-structure-command-bot.png\" alt-text=\"pestaña estructura\":::\n\n Si decide usar el marco de trabajo de la interfaz de usuario, el siguiente código de plantilla de ejemplo proporciona un scaffolding con componentes React. Contiene el siguiente contenido:\n\n | Nombre de archivo | Contenido |\n | --- | --- |\n | `bot/src/internal/initialize.js` | Creación del adaptador de bot global e inicialización con Marcos de Teams |\n | `bot/src/index.js` | Código de servidor para hospedar la aplicación bot y escuchar en /api/messages para procesar la actividad de Teams con Bot Framework |\n | `bot/src/helloworldCommandHandler.js` | Un controlador de comandos hello world para procesar un comando helloworld y devolver una tarjeta adaptable como respuesta |\n | `bot/src/adaptiveCards/*.json` | Archivo JSON de tarjeta adaptable que se usa como respuesta de comando |\n"
- title: Implementación de la primera aplicación de Teams
  durationInMinutes: 1
  content: "\nHa aprendido a compilar y ejecutar una aplicación de Teams con la funcionalidad de bot de comandos. El último paso es implementar la aplicación en Azure.\n\nVamos a implementar la primera aplicación con funcionalidad de bot de comandos en Azure mediante el kit de herramientas de Teams.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Inicio de sesión en su cuenta de Azure\n\nUse su cuenta para acceder a microsoft Azure Portal y proporcionar aprovisionamiento de nuevos recursos en la nube para admitir la aplicación.\n\n1. Abrir Visual Studio Code.\n1. Abra la carpeta del proyecto en la que creó la aplicación del bot de comandos.\n1. Seleccione el icono kit de herramientas de  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: Teams en la barra lateral.\n1. Seleccione **Iniciar sesión en Azure**.\n\n    > [!TIP]\n    > Si tiene instalada la extensión cuenta de Azure y usa la misma cuenta, puede omitir este paso.\n\n    Se abre el explorador web predeterminado para permitirle iniciar sesión en la cuenta.\n1. Inicie sesión en su cuenta de Azure con sus credenciales.\n1. Cierre el explorador cuando se le solicite y vuelva a Visual Studio Code.\n\n    La sección **ACCOUNTS** de la barra lateral muestra las dos cuentas por separado. También muestra el número de suscripciones de Azure utilizables disponibles.\n    \n    > [!NOTE]\n    > Asegúrese de que tiene al menos una suscripción de Azure utilizable disponible.\n\n    Ahora está listo para implementar la aplicación en Azure.\n\n## <a name=\"deploy-your-app-to-azure\"></a>Implementar la aplicación en Azure\n\n En **IMPLEMENTACIÓN** , puede aprovisionar los recursos en la nube necesarios y el código de la aplicación se copia en los recursos en la nube creados.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Seleccione icono del Kit de herramientas de Teams :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: en la barra lateral de Visual Studio Code.\n\n1. Seleccione **Aprovisionar en la nube en** **IMPLEMENTACIÓN**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-cloud.png\" alt-text=\"Captura de pantalla que muestra los comandos de aprovisionamiento\":::\n\n1. Seleccione cualquiera de la suscripción existente.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/select-subscription.png\" alt-text=\"Seleccione Suscripción para aprovisionar \":::\n\n1. Seleccione un grupo de recursos existente o cree uno nuevo.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/subscription-cloud.png\" alt-text=\"Captura de pantalla que muestra los recursos para el aprovisionamiento\":::\n\n    > [!NOTE]\n    > Aparece un cuadro de diálogo en el que se menciona que se pueden incurrir en costos al ejecutar recursos en Azure.\n\n1. Seleccione **Aprovisionar**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-confirm1.png\" alt-text=\"Captura de pantalla del cuadro de diálogo de aprovisionamiento.\":::\n\n   El proceso de aprovisionamiento crea recursos en la nube de Azure. Puede supervisar el progreso observando los diálogos en la esquina inferior derecha. Después de unos minutos, verá el siguiente aviso:\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-provision-success1.png\" alt-text=\"Captura de pantalla que muestra el cuadro de diálogo de aprovisionamiento completo.\":::\n\n     Tiene la opción de ver los recursos aprovisionados. En este tutorial, no es necesario ver los recursos.\n\n1. Seleccione **Implementar en la nube** en **IMPLEMENTACIÓN** una vez completado el aprovisionamiento.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-cloud.png\" alt-text=\"Captura de pantalla que muestra dónde hacer clic para implementar en la nube.\":::\n\n1. Seleccione **Implementar**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/Deploy-confirm.png\" alt-text=\"Implemente para confirmar.\":::\n\n   La implementación tarda algún tiempo. Puede supervisar el progreso en el cuadro de diálogo en la esquina inferior derecha. Después de unos minutos, verá el siguiente aviso.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/command-deploy-confirm.png\" alt-text=\"Confirme la implementación.\":::\n\n\n1. Abra el panel de depuración (**Ctrl+Mayús+D** / **⌘⇧-D** o **Ver > ejecutar**) desde Visual Studio Code.\n1. Seleccione **Iniciar remoto (Edge)** en la lista desplegable de configuración de inicio.\n1. Seleccione **el botón Iniciar depuración** .\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/remote-debug.png\" alt-text=\"Depuración remota.\":::\n\n1. Seleccione **Agregar**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/app-cloud-output.png\" alt-text=\"Salida de la nube de aplicaciones.\":::\n\n1. Seleccione el bot de comandos.\n1. Seleccione **Introducir**.  \n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/hello-world-cloud.png\" alt-text=\"comando Hola mundo\":::\n\n    Recibirá la siguiente respuesta de comando en la tarjeta adaptable:\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/cloud-final-output.png\" alt-text=\"Salida final de la nube\":::\n\n# <a name=\"command-line\"></a>[Línea de comandos](#tab/cli)\n\nEn la ventana del terminal:\n\n1. Ejecute `teamsfx new` para crear un nuevo proyecto.\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. Ejecute `teamsfx provision` para crear un recurso de Azure.\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. Ejecute `teamsfx deploy` para implementar la aplicación.\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. Ejecute `teamsfx preview` para ejecutar la aplicación.\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: Desafío completo
  durationInMinutes: 1
  content: >
    ¿Se te ocurrió algo como esto?


    :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="Salida final de la nube":::
- content: Ha completado el tutorial para compilar la aplicación de respuesta de comandos.
